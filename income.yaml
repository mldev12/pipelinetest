# PIPELINE DEFINITION
# Name: price-adjustment-pipeline
# Description: Pipeline for predicting price adjustments.
# Inputs:
#    bucket: str [Default: 'retail-dataset']
#    object_key: str [Default: 'Fact_Collection_202404291553.csv']
components:
  comp-download-dataset:
    executorLabel: exec-download-dataset
    inputDefinitions:
      parameters:
        bucket_name:
          parameterType: STRING
        object_key:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        output_file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-preprocess-and-feature-engineering:
    executorLabel: exec-preprocess-and-feature-engineering
    inputDefinitions:
      artifacts:
        file_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        output_file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        file_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        output_artifact:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-download-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'boto3'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_dataset(bucket_name: str, object_key: str, output_file:\
          \ OutputPath(\"CSV\")):\n    import boto3\n    s3 = boto3.client('s3', endpoint_url='http://mlflow-minio.local:30869/',\n\
          \                      aws_access_key_id='minio', \n                   \
          \   aws_secret_access_key='minio123')\n    s3.download_file(bucket_name,\
          \ object_key, output_file)\n\n"
        image: python:3.9
    exec-preprocess-and-feature-engineering:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess_and_feature_engineering
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'numpy'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess_and_feature_engineering(file_path: InputPath(\"CSV\"\
          ), output_file: OutputPath(\"CSV\")):\n    import pandas as pd\n    import\
          \ numpy as np\n    df = pd.read_csv(file_path)\n\n    # Convert dates and\
          \ extract components\n    def clean_and_convert(df, date_cols=[], numeric_cols=[],\
          \ remove_duplicates=True):\n        # Convert date columns to datetime\n\
          \        for col in date_cols:\n            df[col] = pd.to_datetime(df[col],\
          \ errors='coerce')\n\n        # Convert numeric columns to floats (ignoring\
          \ errors)\n        for col in numeric_cols:\n            df[col] = pd.to_numeric(df[col],\
          \ errors='coerce')\n\n        # Remove duplicates if required\n        if\
          \ remove_duplicates:\n            df = df.drop_duplicates()\n\n        return\
          \ df\n\n    df_final = clean_and_convert(\n        df,\n        date_cols=['paydate'],\n\
          \        numeric_cols=['a-escuam', 'term', 'dummy', 'no']\n    )\n\n   \
          \ df_final.to_csv(output_file, index=False)\n\n"
        image: python:3.9
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ 'mlflow' 'boto3' 'numpy' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(file_path: InputPath(\"CSV\"), output_artifact: Output[Artifact]):\n\
          \    import mlflow\n    import pandas as pd\n    import numpy as np\n  \
          \  from sklearn.preprocessing import StandardScaler\n    from sklearn.ensemble\
          \ import GradientBoostingRegressor\n    from sklearn.pipeline import Pipeline\n\
          \    from sklearn.model_selection import train_test_split\n    from sklearn.metrics\
          \ import mean_squared_error\n\n    df = pd.read_csv(file_path)\n\n    #\
          \ Redefine feature set without 'lapsed_day'\n    refined_features = ['a-escuam',\
          \ 'term', 'dummy', 'no']\n\n    # Create a refined feature matrix\n    X_refined\
          \ = df[refined_features].fillna(0)\n\n    # Scale features\n    scaler_refined\
          \ = StandardScaler()\n    X_refined_scaled = scaler_refined.fit_transform(X_refined)\n\
          \n    mlflow.log_param('learning_rate', 0.2)\n    mlflow.log_param('max_depth',\
          \ 3)\n    mlflow.log_param('n_estimators', 200)\n\n\n\n    pipeline = Pipeline([\n\
          \        ('scaler', StandardScaler()),\n        ('model', GradientBoostingRegressor(random_state=42,\
          \ learning_rate=0.2, max_depth=3, n_estimators=200))\n    ])\n\n    # Split\
          \ data into training (70%), validation (20%), and testing (10%) with the\
          \ refined features\n    X_train_refined, X_temp_refined, y_train_refined,\
          \ y_temp_refined = train_test_split(\n        X_refined_scaled, y, test_size=0.3,\
          \ random_state=42\n    )\n    X_val_refined, X_test_refined, y_val_refined,\
          \ y_test_refined = train_test_split(\n        X_temp_refined, y_temp_refined,\
          \ test_size=(1/3), random_state=42\n    )\n\n    # Train the new model on\
          \ the refined training set\n    pipeline.fit(X_train_refined, y_train_refined)\n\
          \n    # Predict on the refined validation set\n    y_val_pred_refined =\
          \ pipeline.predict(X_val_refined)\n\n    # Calculate performance on the\
          \ validation set\n    val_rmse = np.sqrt(mean_squared_error(y_val_refined,\
          \ y_val_pred_refined))\n    # Log model to MLflow\n    with mlflow.start_run(run_name=\"\
          Gradient Boosting Regressor\"):\n        mlflow.log_metric(\"mse\",val_rmse)\n\
          \        mlflow.sklearn.log_model(pipeline, \"model\")\n        data = f\"\
          {mlflow.get_artifact_uri()}/model\"\n        with open(output_artifact.path,\
          \ 'w') as f:\n            f.write(data)\n\n"
        env:
        - name: MLFLOW_TRACKING_URI
          value: http://mlflow-server.local
        - name: MLFLOW_S3_ENDPOINT_URL
          value: http://mlflow-minio.local:30869/
        - name: AWS_ACCESS_KEY_ID
          value: minio
        - name: AWS_SECRET_ACCESS_KEY
          value: minio123
        image: python:3.9
pipelineInfo:
  description: Pipeline for predicting price adjustments.
  name: price-adjustment-pipeline
root:
  dag:
    tasks:
      download-dataset:
        cachingOptions: {}
        componentRef:
          name: comp-download-dataset
        inputs:
          parameters:
            bucket_name:
              componentInputParameter: bucket
            object_key:
              componentInputParameter: object_key
        taskInfo:
          name: download-dataset
      preprocess-and-feature-engineering:
        cachingOptions: {}
        componentRef:
          name: comp-preprocess-and-feature-engineering
        dependentTasks:
        - download-dataset
        inputs:
          artifacts:
            file_path:
              taskOutputArtifact:
                outputArtifactKey: output_file
                producerTask: download-dataset
        taskInfo:
          name: preprocess-and-feature-engineering
      train-model:
        cachingOptions: {}
        componentRef:
          name: comp-train-model
        dependentTasks:
        - preprocess-and-feature-engineering
        inputs:
          artifacts:
            file_path:
              taskOutputArtifact:
                outputArtifactKey: output_file
                producerTask: preprocess-and-feature-engineering
        taskInfo:
          name: train-model
  inputDefinitions:
    parameters:
      bucket:
        defaultValue: retail-dataset
        isOptional: true
        parameterType: STRING
      object_key:
        defaultValue: Fact_Collection_202404291553.csv
        isOptional: true
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
